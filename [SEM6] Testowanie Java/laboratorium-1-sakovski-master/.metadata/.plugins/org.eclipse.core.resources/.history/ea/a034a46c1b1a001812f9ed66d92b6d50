import static org.junit.Assert.*;

import org.junit.Test;

public class GenericTableTest {
	
	private static final double EPSILON = 0.1;
	
	@Test
	public void largest_oneintelem_test() {
		int elem = 4;
		GenericTable<Integer> table = new GenericTable<Integer>(new Integer[]{elem});
		int largest = table.largest(table);
		assertEquals(elem, largest);
	}
	
	@Test
	public void largest_onestringelem_test() {
		String elem = "test";
		GenericTable<String> table = new GenericTable<String>(new String[]{elem});
		String largest = table.largest(table);
		assertEquals(elem, largest);
	}
	
	@Test
	public void largest_onecharelem_test() {
		char elem = 'a';
		GenericTable<Character> table = new GenericTable<Character>(new Character[]{elem});
		char largest = table.largest(table);
		assertEquals(elem, largest);
	}

	@Test
	public void largest_onedoubleelem_test() {
		double elem = 13.05;
		GenericTable<Double> table = new GenericTable<Double>(new Double[]{elem});
		double largest = table.largest(table);
		assertEquals(elem, largest, EPSILON);
	}
	
	@Test
	public void largest_int_test() {
		GenericTable<Integer> table = new GenericTable<Integer>(new Integer[]{55,3,2,5,1,6,11,3,3,2,1});
		int largest = table.largest(table);
		assertEquals(55, largest);
	}
	
	@Test
	public void largest_char_test() {
		GenericTable<Character> table = new GenericTable<Character>(new Character[]{'a', 'x', 'z', 'b', 's'});
		char largest = table.largest(table);
		assertEquals('z', largest);
	}
	
	@Test
	public void largest_string_test() {
		GenericTable<String> table = new GenericTable<String>(new String[]{"abba", "zssa", "aaa", "bbb"});
		String largest = table.largest(table);
		assertEquals("zssa", largest);
	}
	
	@Test
	public void largest_double_test() {
		GenericTable<Double> table = new GenericTable<Double>(new Double[]{4.05, 2.113, 10.456, 5.065});
		double largest = table.largest(table);
		assertEquals(10.456, largest, EPSILON);
	}
	
	@Test
	public void smallest_oneelem_test() {
		int elem = 4;
		Table table = new Table(new int[]{elem});
		int smallest = table.smallest(table);
		assertEquals(elem, smallest);
	}
	
	@Test
	public void smallest_zeros_test() {
		Table table = new Table(new int[]{0,0,0,0,0,0});
		int smallest = table.smallest(table);
		assertEquals(0, smallest);
	}
	
	@Test
	public void smallest_inbeginning_test() {
		Table table = new Table(new int[]{0,3,2,5,1,6,11,3,3,2,1});
		int smallest = table.smallest(table);
		assertEquals(0, smallest);
	}
	
	@Test
	public void smallest_inmiddle_test() {
		Table table = new Table(new int[]{3,2,5,1,6,0,3,3,2,1});
		int smallest = table.smallest(table);
		assertEquals(0, smallest);
	}
	
	@Test
	public void smallest_inend_test() {
		Table table = new Table(new int[]{3,2,5,1,6,10,3,3,2,1,0});
		int smallest = table.smallest(table);
		assertEquals(0, smallest);
	}
	
	@Test(expected=IllegalArgumentException.class)
	public void isSorted_null_test() {
		Table table = new Table(null);
		assertNull(table.isSorted(table));
	}
	
	@Test(expected=IllegalArgumentException.class)
	public void isSorted_oneelem_test() {
		int elem = 4;
		Table table = new Table(new int[]{elem});
		assertNull(table.isSorted(table));
	}
	
	@Test
	public void isSorted_false_test() {
		Table table = new Table(new int[]{1,2,3,5,4,6});
		assertFalse(table.isSorted(table));
	}
	
	@Test
	public void isSorted_true_test() {
		Table table = new Table(new int[]{10,110,120,130,140,150});
		assertTrue(table.isSorted(table));
	}

}
